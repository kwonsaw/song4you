package com.example.song4u.network;import android.net.Uri;import com.example.song4u.Application.AppAplication;import com.example.song4u.Util.CommonUtil;import com.example.song4u.network.resultmodel.GetAddMusicCheckResultModel;import com.example.song4u.network.resultmodel.GetAppVersionResultModel;import com.example.song4u.network.resultmodel.GetBannerResultModel;import com.example.song4u.network.resultmodel.GetCheckMusicResultModel;import com.example.song4u.network.resultmodel.GetCouponResultModel;import com.example.song4u.network.resultmodel.GetFaqResultModel;import com.example.song4u.network.resultmodel.GetGenieParserResultModel;import com.example.song4u.network.resultmodel.GetGenieSearchResultModel;import com.example.song4u.network.resultmodel.GetGifticonResultModel;import com.example.song4u.network.resultmodel.GetMelonParserResultModel;import com.example.song4u.network.resultmodel.GetMelonSearchResultModel;import com.example.song4u.network.resultmodel.GetMusicInfoResultModel;import com.example.song4u.network.resultmodel.GetMusicListResultModel;import com.example.song4u.network.resultmodel.GetMusicRankResultModel;import com.example.song4u.network.resultmodel.GetMusicResultModel;import com.example.song4u.network.resultmodel.GetNoticeResultModel;import com.example.song4u.network.resultmodel.GetPointHistoryResultModel;import com.example.song4u.network.resultmodel.GetPopupNoticeResultModel;import com.example.song4u.network.resultmodel.GetPrerollResultModel;import com.example.song4u.network.resultmodel.GetReplyResultModel;import com.example.song4u.network.resultmodel.GetSupportMusicResultModel;import com.example.song4u.network.resultmodel.GetUserInfoResultModel;import com.example.song4u.network.resultmodel.MobifeedResultModel;import com.example.song4u.network.resultmodel.PointNewsResultModel;import com.example.song4u.network.resultmodel.SetAddMusicResultModel;import com.example.song4u.network.resultmodel.SetBannerResultModel;import com.example.song4u.network.resultmodel.SetDeleteUserResultModel;import com.example.song4u.network.resultmodel.SetGifticonResultModel;import com.example.song4u.network.resultmodel.SetMusicLikeResultModel;import com.example.song4u.network.resultmodel.SetMusicPointResultModel;import com.example.song4u.network.resultmodel.SetPointNewsResultModel;import com.example.song4u.network.resultmodel.SetPrerollResultModel;import com.example.song4u.network.resultmodel.SetRecommendResultModel;import com.example.song4u.network.resultmodel.SetReplyMusicResultModel;import com.example.song4u.network.resultmodel.SetReplyReportResultModel;import com.example.song4u.network.resultmodel.SetSupportMusicResultModel;import com.example.song4u.network.resultmodel.SetUserLoginResultModel;import com.example.song4u.network.resultmodel.SetUserNicknameResultModel;import com.example.song4u.network.resultmodel.SetUserProfileResultModel;import org.json.JSONObject;import java.io.File;import java.util.HashMap;import java.util.concurrent.TimeUnit;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.converter.scalars.ScalarsConverterFactory;public class NetworkManager {    private Retrofit mRetrofit;    private NetworkService mService;    private static String ipAddress = "http://139.150.71.159";    private static String parserAddress = "https://www.mableinc.co.kr/";    private static String storeAddress = "http://103.55.191.187";    public void getMobFeedLineNews(String userId, int cnt, Callback<MobifeedResultModel> callback) {//        String devUrl = "http://stage.mobfeed.co.kr";        String realUrl = "https://api.oasisfeed.com";        mRetrofit = new Retrofit.Builder()                .baseUrl(realUrl)                .addConverterFactory(ScalarsConverterFactory.create())                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        try {            JSONObject paramObject = new JSONObject();            paramObject.put("userKey", userId);            paramObject.put("statiFlag", "N");            paramObject.put("newsSize", String.valueOf(cnt));            Call<MobifeedResultModel> result = mService.getMobFeedLineNews(paramObject.toString());            result.enqueue(callback);        } catch (Exception e) {            System.out.println(e.getMessage());        }    }    public void getPointNews(String userId, String devideId, String ver, String sdkVer, String isRoot, Callback<PointNewsResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getpointnewsmain.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userId", userId);        params.put("os","001");        params.put("version", ver);        params.put("sdkver",sdkVer);        params.put("isroot", isRoot);        params.put("deviceId", devideId);        Call<PointNewsResultModel> result = mService.getPointNews(params);        result.enqueue(callback);    }    public void setUserLogin(String userId, String logintype, OkHttpClient cl, Callback<SetUserLoginResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setUserLogin.php/")                .addConverterFactory(GsonConverterFactory.create())                .client(cl)                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userId);        params.put("logintype", logintype);        Call<SetUserLoginResultModel> result = mService.setUserLogin(params);        result.enqueue(callback);    }    public void setUserInfo(String userId, String adid, String appVer, String os, String nickname, String image, String logintype, String osinfo, Callback<SetUserLoginResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setUserInfo.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userId);        params.put("adid", adid);        params.put("appVer", appVer);        params.put("os",os);        params.put("nickname", nickname);        params.put("image", image);        params.put("logintype", logintype);        params.put("osinfo", osinfo);        Call<SetUserLoginResultModel> result = mService.setUserLogin(params);        result.enqueue(callback);    }    public void getUserInfo(String userId, Callback<GetUserInfoResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getUserInfo.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userId);        Call<GetUserInfoResultModel> result = mService.getUserInfo(params);        result.enqueue(callback);    }    public void getAppVersion(String os, String appVersion, Callback<GetAppVersionResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getAppVersion.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("os", os);        params.put("appVersion", appVersion);        Call<GetAppVersionResultModel> result = mService.getAppVersion(params);        result.enqueue(callback);    }    public void getPopupNotice(String os, String appVersion, Callback<GetPopupNoticeResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getPopupNotice.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("os", os);        params.put("appVersion", appVersion);        Call<GetPopupNoticeResultModel> result = mService.getPopupNotice(params);        result.enqueue(callback);    }    public void getPreroll(String os, String appVersion, Callback<GetPrerollResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getPreroll.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("os", os);        params.put("appVersion", appVersion);        Call<GetPrerollResultModel> result = mService.getPreroll(params);        result.enqueue(callback);    }    public void setPreroll(String userId, String appVersion, String saveMoney, String sourceId, Callback<SetPrerollResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setPreroll.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userId);        params.put("appVersion", appVersion);        params.put("saveMoney", saveMoney);        params.put("sourceId", sourceId);        Call<SetPrerollResultModel> result = mService.setPreroll(params);        result.enqueue(callback);    }    public void setBanner(String userId, String appVersion, String saveMoney, String sourceId, Callback<SetBannerResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setBannerSaveMoney.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userId);        params.put("appVersion", appVersion);        params.put("saveMoney", saveMoney);        params.put("sourceId", sourceId);        Call<SetBannerResultModel> result = mService.setBanner(params);        result.enqueue(callback);    }    public void getBanner(String userid, String appVersion,Callback<GetBannerResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getBanner.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userid);        params.put("appVersion", appVersion);        Call<GetBannerResultModel> result = mService.getBanner(params);        result.enqueue(callback);    }    public void setPointNews(String userId, String appVersion, String uId, String sourceId,OkHttpClient cl, Callback<SetPointNewsResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setPointnews.php/")                .addConverterFactory(GsonConverterFactory.create())                .client(cl)                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userId", userId);        params.put("appVersion", appVersion);        params.put("uId", uId);        params.put("sourceId", sourceId);        Call<SetPointNewsResultModel> result = mService.setPointNews(params);        result.enqueue(callback);    }    public void getNotice(String pageNum, String os, Callback<GetNoticeResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getNotice.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("pageNum", pageNum);        params.put("os", os);        Call<GetNoticeResultModel> result = mService.getNotice(params);        result.enqueue(callback);    }    public void getFaq(String pageNum, String os, Callback<GetFaqResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getFaq.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("pageNum", pageNum);        params.put("os", os);        Call<GetFaqResultModel> result = mService.getFaq(params);        result.enqueue(callback);    }    public void setUserProfile(Uri filePath, String userid, OkHttpClient cl, Callback<SetUserProfileResultModel> callback) {        String path = CommonUtil.getPath(filePath, AppAplication.context);        //File file = new File(CommonUtil.compress(path));        File file = new File(path);        String uploadUrl = "http://139.150.71.159/project/SFU/setUserProfile.php/";        OkHttpClient okHttpClient = new OkHttpClient.Builder()                .connectTimeout(1, TimeUnit.MINUTES)                .readTimeout(30, TimeUnit.SECONDS)                .writeTimeout(15, TimeUnit.SECONDS)                .build();        mRetrofit = new Retrofit.Builder()                .baseUrl(uploadUrl)                .addConverterFactory(ScalarsConverterFactory.create())                .addConverterFactory(GsonConverterFactory.create())                .client(okHttpClient)                .build();        mService = mRetrofit.create(NetworkService.class);        RequestBody userId = RequestBody.create(MultipartBody.FORM, userid);        RequestBody fileBody = RequestBody.create(MultipartBody.FORM, file);        MultipartBody.Part image = MultipartBody.Part.createFormData("file", file.getName(), fileBody);        try {            Call<SetUserProfileResultModel> result = mService.setUserProfile(userId, image);            result.enqueue(callback);        } catch (Exception e) {            System.out.println(e.getMessage());        }    }    public void setUserNickname(String userId, String nickname, Callback<SetUserNicknameResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setUserNickname.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userId", userId);        params.put("nickname", nickname);        Call<SetUserNicknameResultModel> result = mService.setUserNickname(params);        result.enqueue(callback);    }    public void getPointHistory(String appVersion, String userId, String pageNum, Callback<GetPointHistoryResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getPointHistory.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userId", userId);        params.put("pageNum", pageNum);        Call<GetPointHistoryResultModel> result = mService.getPointHistory(params);        result.enqueue(callback);    }    public void getMusic(String appVersion, String userid, Callback<GetMusicResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getMusic.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        Call<GetMusicResultModel> result = mService.getMusic(params);        result.enqueue(callback);    }    public void setMusicPoint(String appVersion, String userId, String musicid, String saveMoney, String type,String uid, Callback<SetMusicPointResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setMusicPoint.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userId", userId);        params.put("musicid", musicid);        params.put("saveMoney", saveMoney);        params.put("type", type);        params.put("uid", uid);        Call<SetMusicPointResultModel> result = mService.setMusicPoint(params);        result.enqueue(callback);    }    public void getMelonParser(String songid, Callback<GetMelonParserResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(parserAddress + "/project/SFU/freemusic_melon_parser.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("songid", songid);        Call<GetMelonParserResultModel> result = mService.getMelonParser(params);        result.enqueue(callback);    }    public void getMelonSearch(String title, Callback<GetMelonSearchResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(parserAddress + "/project/SFU/getmelon_search_musiclist.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("title", title);        Call<GetMelonSearchResultModel> result = mService.getMelonSearch(params);        result.enqueue(callback);    }    public void getGenieParser(String songid, Callback<GetGenieParserResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(parserAddress + "/project/SFU/freemusic_genie_parser.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("songid", songid);        Call<GetGenieParserResultModel> result = mService.getGenieParser(params);        result.enqueue(callback);    }    public void getGenieSearch(String title, Callback<GetGenieSearchResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(parserAddress + "/project/SFU/getgenie_search_musiclist.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("title", title);        Call<GetGenieSearchResultModel> result = mService.getGenieSearch(params);        result.enqueue(callback);    }    public void setAddMusic(String appVersion, String userid, String title,String singer, String mainimgurl, String type,String songid,String play_cnt,String removeMoney, Callback<SetAddMusicResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setAddMusic.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("title", title);        params.put("singer", singer);        params.put("mainimgurl", mainimgurl);        params.put("type", type);        params.put("songid", songid);        params.put("singer", singer);        params.put("play_cnt", play_cnt);        params.put("removeMoney", removeMoney);        Call<SetAddMusicResultModel> result = mService.setAddMusic(params);        result.enqueue(callback);    }    /* 사용안함 : getMusic에서 한번에 처리 */    public void getMusicList(String appVersion, String userid, Callback<GetMusicListResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getMusicList.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        Call<GetMusicListResultModel> result = mService.getMusicList(params);        result.enqueue(callback);    }    public void getMusicInfo(String appVersion,String musicid, String userid, String songid, Callback<GetMusicInfoResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getMusicInfo.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("musicid", musicid);        params.put("userid", userid);        params.put("songid", songid);        Call<GetMusicInfoResultModel> result = mService.getMusicInfo(params);        result.enqueue(callback);    }    public void setMusicLike(String musicid, String userid, Callback<SetMusicLikeResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setMusicLike.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("musicid", musicid);        params.put("userid", userid);        Call<SetMusicLikeResultModel> result = mService.setMusicLike(params);        result.enqueue(callback);    }    public void getCheckMusic(String appVersion, String userid, String musicid, String type, Callback<GetCheckMusicResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getCheckMusic.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("musicid", musicid);        params.put("type", type);        Call<GetCheckMusicResultModel> result = mService.getCheckMusic(params);        result.enqueue(callback);    }    public void setSupportMusic(String appVersion, String userid, String musicid, String songid, String title,String singer,String play_cnt,String removeMoney, Callback<SetSupportMusicResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setSupportMusic.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("musicid", musicid);        params.put("songid", songid);        params.put("title", title);        params.put("singer", singer);        params.put("play_cnt", play_cnt);        params.put("removeMoney", removeMoney);        Call<SetSupportMusicResultModel> result = mService.setSupportMusic(params);        result.enqueue(callback);    }    public void setReplyMusic(String appVersion, String userid, String musicid, String replyid, String desc, String type, Callback<SetReplyMusicResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setReplyMusic.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("musicid", musicid);        params.put("replyid", replyid);        params.put("desc", desc);        params.put("type", type);        Call<SetReplyMusicResultModel> result = mService.setReplyMusic(params);        result.enqueue(callback);    }    public void getReply(String appVersion, String userid, String musicid, String pagenum, Callback<GetReplyResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getReply.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("musicid", musicid);        params.put("pagenum", pagenum);        Call<GetReplyResultModel> result = mService.getReply(params);        result.enqueue(callback);    }    public void setReplyReport(String appVersion, String userid, String replyid, Callback<SetReplyReportResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setReplyReport.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("replyid", replyid);        Call<SetReplyReportResultModel> result = mService.setReplyReport(params);        result.enqueue(callback);    }    public void getMusicRank(String appVersion, String pagenum, Callback<GetMusicRankResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getMusicRank.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("pagenum", pagenum);        Call<GetMusicRankResultModel> result = mService.getMusicRank(params);        result.enqueue(callback);    }    /* 회원탈퇴 */    public void setDeleteUser(String userid, Callback<SetDeleteUserResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setDeleteUser.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("userid", userid);        Call<SetDeleteUserResultModel> result = mService.setDeleteUser(params);        result.enqueue(callback);    }    /* 내가 후원한 음원 */    public void getSupportMusic(String appVersion, String userid, Callback<GetSupportMusicResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getSupportMusic.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        Call<GetSupportMusicResultModel> result = mService.getSupportMusic(params);        result.enqueue(callback);    }    /* 추천인 등록 */    public void setRecommend(String appVersion, String userid, String recommender, Callback<SetRecommendResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/setRecommender.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("recommender", recommender);        Call<SetRecommendResultModel> result = mService.setRecommend(params);        result.enqueue(callback);    }    /* 음원등록 체크 (이미 등록되어있는지 여부) */    public void getAddMusicCheck(String appVersion, String userid, String songid, String type, Callback<GetAddMusicCheckResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getAddMusicCheck.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("songid", songid);        params.put("type", type);        Call<GetAddMusicCheckResultModel> result = mService.getAddMusicCheck(params);        result.enqueue(callback);    }    /* 스토어 상품 리스트 */    public void getGifticon(String appVersion, String userid, Callback<GetGifticonResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getGifticonList.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        Call<GetGifticonResultModel> result = mService.getGifticon(params);        result.enqueue(callback);    }    /* 스토어 상품 구매 */    public void setGifticon(String appVersion, String userid, String androidid, String phoneNumber, String gifticonProductId,String price, OkHttpClient cl, Callback<SetGifticonResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(storeAddress + "/project/SFU/setGifticonSFU.php/")                .addConverterFactory(GsonConverterFactory.create())                .client(cl)                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("os", "001");        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("androidid", androidid);        params.put("phoneNumber", phoneNumber);        params.put("gifticonProductId", gifticonProductId);        params.put("price", price);        Call<SetGifticonResultModel> result = mService.setGifticon(params);        result.enqueue(callback);    }    /* 쿠폰함 리스트 */    public void getCoupon(String appVersion, String userid, String pageNum, Callback<GetCouponResultModel> callback) {        mRetrofit = new Retrofit.Builder()                .baseUrl(ipAddress + "/project/SFU/getCouponList.php/")                .addConverterFactory(GsonConverterFactory.create())                .build();        mService = mRetrofit.create(NetworkService.class);        HashMap<String, String> params = new HashMap<>();        params.put("appVersion", appVersion);        params.put("userid", userid);        params.put("pageNum", pageNum);        Call<GetCouponResultModel> result = mService.getCoupon(params);        result.enqueue(callback);    }}